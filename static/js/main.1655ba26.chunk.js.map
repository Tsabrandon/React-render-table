{"version":3,"sources":["components/counter.jsx","App.js","serviceWorker.js","index.js"],"names":["Counter","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","movies","id","title","Genre","rate","handleDelete","bind","assertThisInitialized","movie","filter","m","setState","_this2","react_default","a","createElement","length","className","scope","map","key","genre","onClick","Component","App","counter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAkEeA,cAjDX,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAdJI,MAAQ,CACJC,OAAQ,CACJ,CAACC,GAAI,EAAGC,MAAO,OAAQC,MAAQ,MAAOC,KAAM,GAC5C,CAACH,GAAI,EAAGC,MAAO,OAAQC,MAAQ,MAAOC,KAAM,GAC5C,CAACH,GAAI,EAAGC,MAAO,WAAYC,MAAQ,MAAOC,KAAM,KAChD,CAACH,GAAI,EAAGC,MAAO,WAAYC,MAAQ,MAAOC,KAAM,GAChD,CAACH,GAAI,EAAGC,MAAO,kBAAmBC,MAAQ,MAAOC,KAAM,KACvD,CAACH,GAAI,EAAGC,MAAO,WAAYC,MAAQ,MAAOC,KAAM,KAChD,CAACH,GAAI,EAAGC,MAAO,UAAWC,MAAQ,MAAOC,KAAM,GAC/C,CAACH,GAAI,EAAGC,MAAO,SAAUC,MAAQ,MAAOC,KAAM,KAC9C,CAACH,GAAI,EAAGC,MAAO,WAAYC,MAAQ,MAAOC,KAAM,OAKpDZ,EAAKa,aAAeb,EAAKa,aAAaC,KAAlBb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KAFXA,4EAMHgB,GACV,IAAIR,EAASL,KAAKI,MAAMC,OAAOS,OAAO,SAAAC,GAAC,OAAIA,EAAET,KAAOO,EAAMP,KAC1DN,KAAKgB,SAAS,CAACX,4CAIN,IAAAY,EAAAjB,KACJ,OAA0B,IAAtBA,KAAKI,MAAMC,OACTa,EAAAC,EAAAC,cAAA,wBAEHF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,yBAAiBpB,KAAKI,MAAMC,OAAOgB,OAAnC,2BACJH,EAAAC,EAAAC,cAAA,SAAOE,UAAU,SACbJ,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,MAAIG,MAAM,OAAV,KACAL,EAAAC,EAAAC,cAAA,MAAIG,MAAM,OAAV,SACAL,EAAAC,EAAAC,cAAA,MAAIG,MAAM,OAAV,SACAL,EAAAC,EAAAC,cAAA,MAAIG,MAAM,OAAV,QACAL,EAAAC,EAAAC,cAAA,MAAIG,MAAM,OAAV,YAGAL,EAAAC,EAAAC,cAAA,aACKpB,KAAKI,MAAMC,OAAOmB,IAAI,SAAAX,GAAK,OAAKK,EAAAC,EAAAC,cAAA,MAAIK,IAAKZ,EAAMP,IAC5CY,EAAAC,EAAAC,cAAA,UAAKP,EAAMP,IACXY,EAAAC,EAAAC,cAAA,UAAKP,EAAMN,OACXW,EAAAC,EAAAC,cAAA,UAAKP,EAAMa,OACXR,EAAAC,EAAAC,cAAA,UAAKP,EAAMJ,MACXS,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQE,UAAU,iBAAiBK,QAAS,kBAAMV,EAAKP,aAAaG,KAApE,yBAhDVe,aCWPC,0LARX,OACEX,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACTJ,EAAAC,EAAAC,cAACU,EAAD,cAJMF,cCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECRNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1655ba26.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\n\nclass Counter extends Component {\n    state = {  \n        movies: [\n            {id: 1, title: 'Thor', Genre : 'CGI', rate: 5 },\n            {id: 2, title: 'Hulk', Genre : 'CGI', rate: 3 },\n            {id: 3, title: 'Ragnarok', Genre : 'CGI', rate: 4.5 },\n            {id: 4, title: 'Avengers', Genre : 'CGI', rate: 4 },\n            {id: 5, title: 'Captain America', Genre : 'CGI', rate: 4.2 },\n            {id: 6, title: 'Iron Man', Genre : 'CGI', rate: 4.3 },\n            {id: 7, title: 'Aquaman', Genre : 'CGI', rate: 3 },\n            {id: 8, title: 'Marvel', Genre : 'CGI', rate: 3.5 },\n            {id: 9, title: 'Superman', Genre : 'CGI', rate: 1.5 }\n        ]\n    }\n    constructor(){\n        super();\n        this.handleDelete = this.handleDelete.bind(this);\n    }\n\n\nhandleDelete (movie){\n    let movies = this.state.movies.filter(m => m.id !== movie.id)\n    this.setState({movies})\n}\n\n\n    render() {\n         if (this.state.movies === 0) \n        return <p> create one</p>\n        return(\n            <div>  \n                <p> Showing the {this.state.movies.length} movies in the database</p>\n            <table className=\"table\">\n                <thead>\n                    <tr>\n                    <th scope=\"col\">#</th>\n                    <th scope=\"col\">Title</th>\n                    <th scope=\"col\">Genre</th>\n                    <th scope=\"col\">Rate</th>\n                    <th scope=\"col\">Delete</th>\n                    </tr>\n                </thead>\n                    <tbody> \n                        {this.state.movies.map(movie => (<tr key={movie.id}>\n                            <td>{movie.id}</td>\n                            <td>{movie.title}</td>\n                            <td>{movie.genre}</td>\n                            <td>{movie.rate}</td>\n                            <td><button className=\"btn btn-danger\" onClick={() => this.handleDelete(movie)}> Delete</button></td>\n\n                        </tr>))}\n\n\n                    </tbody>\n\n            </table>\n\n            </div>\n        );\n    }\n\n}\n \nexport default Counter;\n\n","import React, { Component } from 'react';\nimport Counter from './components/counter'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n            <Counter/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}